# -*- coding: utf-8 -*-
"""
Created on Wed Apr 15 11:23:26 2020

@author: mshandhi3
"""



# -*- coding: utf-8 -*-
"""
Created on Thu Jul 11 13:36:39 2019

@author: mshandhi3
"""


"""
#this code is to get classification results from HP2E data using SVM and other classifier.
#train and test using loso cross-validation, for testing get maximum number of vote for the data points per subject and
# use that as predicted class.

"""

import numpy
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import scipy as sp
import collections
from mpl_toolkits.axes_grid1 import host_subplot
import mpl_toolkits.axisartist as AA
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import r2_score
from sklearn.decomposition import PCA, FastICA
import xgboost as xgb
#import xgboost
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import LeaveOneGroupOut
from sklearn.manifold import TSNE
import itertools
from sklearn import preprocessing
from itertools import cycle
from sklearn.linear_model import LogisticRegression
from sklearn import neighbors
from sklearn.ensemble import ExtraTreesClassifier
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.svm import LinearSVR
from sklearn import linear_model
from sklearn.linear_model import ElasticNet
from sklearn.ensemble import BaggingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.cluster import KMeans
from sklearn.random_projection import GaussianRandomProjection
from sklearn.random_projection import SparseRandomProjection
from sklearn.decomposition import TruncatedSVD
from sklearn import cluster
import seaborn as sns
from sklearn import manifold
from sklearn import preprocessing
from scipy.spatial import distance
from sklearn.preprocessing import Imputer
from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler
from sklearn.impute import SimpleImputer
from scipy import signal
from scipy.signal import savgol_filter
from IPython import get_ipython
from scipy import stats
import csv
from matplotlib import pyplot
from sklearn.calibration import calibration_curve
from sklearn.svm import SVC
from sklearn.svm import LinearSVC
from imblearn.over_sampling import RandomOverSampler
from imblearn.over_sampling import SMOTE, ADASYN
from imblearn.over_sampling import BorderlineSMOTE
from imblearn.over_sampling import SVMSMOTE
from collections import Counter
from sklearn.metrics import roc_curve, auc,make_scorer,f1_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import GroupKFold
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from scipy import interp
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectKBest,chi2, f_classif,  mutual_info_classif, RFE, SelectFromModel,SelectFdr

#import scikitplot as skplt

plt.rcParams.update({'figure.max_open_warning': 0})

def f_importances(coef, names):
    imp = coef
    imp,names = zip(*sorted(zip(imp,names)))
    plt.barh(range(len(names)), imp, align='center')
    plt.yticks(range(len(names)), names)
    plt.show()

def countX(lst, x): 
    return lst.count(x) 

def plot_roc_curve(fpr, tpr):  
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()

def perf_measure(y_actual, y_hat):
    TP = 0
    FP = 0
    TN = 0
    FN = 0

    for i in range(len(y_hat)): 
        if y_actual[i]==y_hat[i]==1:
           TP += 1
        if y_hat[i]==1 and y_actual[i]!=y_hat[i]:
           FP += 1
        if y_actual[i]==y_hat[i]==0:
           TN += 1
        if y_hat[i]==0 and y_actual[i]!=y_hat[i]:
           FN += 1

    return(TP, FP, TN, FN)


def bland_altman_plot(data1, data2, *args, **kwargs):
    data1     = np.asarray(data1)
    data2     = np.asarray(data2)
    mean      = np.mean([data1, data2], axis=0)
    diff      = data1 - data2                   # Difference between data1 and data2
    md        = np.mean(diff)                   # Mean of the difference
    sd        = np.std(diff, axis=0)            # Standard deviation of the difference

    plt.scatter(mean, diff, *args, **kwargs)
    plt.axhline(md,           color='gray', linestyle='--')
    plt.axhline(md + 1.96*sd, color='gray', linestyle='--')
    plt.axhline(md - 1.96*sd, color='gray', linestyle='--')

plt.close('all')
plt.interactive(False)

#get_ipython().run_line_magic('matplotlib', 'qt5')
#read dataset for Mac

# Read Dataset for Windows
#data_frame = pd.read_csv('D:\Onedrive Gatech\OneDrive - Georgia Institute of Technology\Research at Gatech\HP2E Data from UCSF\Analysis For Classification Journal\Feature File\HP2E Features 82 files 20190710.csv')
#df=pd.read_csv('D:\Onedrive Gatech\OneDrive - Georgia Institute of Technology\Documents\Mousumi\code\nusrat_1000sample_dataset.csv')
#df=pd.read_csv('nusrat_1000sample_dataset.csv')
df=pd.read_csv('nusrat_all_dataset.csv')

feature_set = list(df.columns.values) 
feature_set.remove('Class')
X=(df.drop(columns=['Class'])).values
Y=(df['Class'])

# drop rows with nan

Y=Y[~np.isnan(X).any(axis=1)]
X=X[~np.isnan(X).any(axis=1)]

y= np.zeros(Y.shape)
class_names=list(np.unique(Y))
class_num=0
number_of_classes=np.unique(Y).shape[0]
for classes in np.unique(Y):
    y[Y==classes]=int(class_num)
    print('Class '+ classes + ': ' + str(class_num))
    class_num=class_num+1

X = StandardScaler().fit_transform(X) #### for anaova
#X = MinMaxScaler().fit_transform(X) #### for Chi2

## Select features
fdr = SelectFdr(f_classif,alpha=0.005) #### for anaova
#fdr = SelectFdr(chi2,alpha=0.05) #### for Chi2
X_sel = fdr.fit_transform(X,y)
idx_sorted = fdr.get_support(indices = True)
fdr_select_features = list( feature_set[i] for i in idx_sorted)
print ('Selected features with FDR: ')
print  (fdr_select_features)
print ('\n')
print (X.shape)
print (X_sel.shape)

X_new = df[fdr_select_features].values
Y=(df['Class'])

le = preprocessing.LabelEncoder()
y=le.fit_transform(Y)




######to select top 100 features############
kbest=SelectKBest(f_classif,k=100)
X_select = kbest.fit_transform(X_new,y)
#X_select = SelectKBest(chi2,k=100).fit_transform(X_select,y)

idx_sorted = kbest.get_support(indices = True)
#pvals = kbest.pvalues_
#pscores = kbest.scores_

print (X_new.shape)
print (X_select.shape)


kbest_features = list( fdr_select_features[i] for i in idx_sorted)
print ('Selected 100 features: ')
print  (kbest_features)
print ('\n')


X_select = df[kbest_features].values
#X=X_select

    

# Binarize the output
#y = label_binarize(y, classes=[0, 1, 2])
#n_classes = y.shape[1]

#lb = preprocessing.LabelBinarizer()
#y = lb.fit_transform(y)
#n_classes = y.shape[1]



#print ('Train on the whole')
#print num_subjects

random_state = np.random.RandomState(0)
## Determine parameters
#clf = RandomForestClassifier(max_depth=5, n_estimators=50,max_features = 'sqrt',n_jobs=-1)
##clf = OneVsRestClassifier(RandomForestClassifier(n_estimators = 100,  random_state= random_state, max_features = 'sqrt',n_jobs=-1))
#grid = {'max_depth': [5,8,10,15,20],
#        'n_estimators': [50,100,150,200,300,400]};
#
#cv = KFold(n_splits=10) #this is for nested leave one out CV
##scorer = make_scorer(f1_score, average = 'weighted')
##scorer = make_scorer(roc_auc_score(average='micro'))
#grid_search = GridSearchCV(clf, param_grid=grid,scoring='roc_auc_ovr_weighted' , cv = cv, n_jobs = -1)
#grid_search.fit(X_select,y)
#
#best_grid = grid_search.best_params_
#print ("Best Grid")
#print (best_grid)
#
#model = grid_search.best_estimator_



model = RandomForestClassifier(n_estimators = 100,  random_state= random_state, max_features = 'sqrt',n_jobs=-1) #### for AUC
#model = RandomForestClassifier(max_depth=20, random_state= random_state,n_estimators=50,max_features = 'sqrt',n_jobs=-1)  #### for F1

model.fit(X_select, y)





## Get names of features, sort according to importance scores
importances = model.feature_importances_
importance_sorted = importances
#select_features = list( kbest_features[i] for i in idx_sorted)
feature_names = kbest_features

indices = np.argsort(importances)[::-1]

feature_type = []

indices = np.argsort(importances)[::-1]
for i in range(X_select.shape[1]):
	importance_sorted[i] = importances[indices[i]]
	feature_names[i] = kbest_features[indices[i]]



## Save 
df_rankings = pd.DataFrame()
df_rankings['Feature_names'] = feature_names
df_rankings['importances'] = importance_sorted


print(df_rankings)

from matplotlib.font_manager import FontProperties

fontP = FontProperties()
fontP.set_size('small')
number_of_features_to_plot = 10
fig = plt.figure();
sns.set(font_scale=0.8)
with sns.axes_style('whitegrid', {'grid.linestyle':'--'}):
    ax=sns.barplot(y='Feature_names', x='importances', data=df_rankings[0:number_of_features_to_plot] , linewidth=1.5 ,
                   palette=sns.xkcd_palette(['shamrock' ]) , errcolor ='.2', edgecolor='.2'
                   , alpha=0.8, capsize=0.2)
    
    ax.set(yticks = np.arange(number_of_features_to_plot))
    ax.spines['left'].set_color('black')
    ax.spines['right'].set_color('black')
    ax.spines['top'].set_color('black')
    ax.spines['bottom'].set_color('black')
    ax.spines['left'].set_linewidth(1)
    ax.spines['right'].set_linewidth(1)
    ax.spines['top'].set_linewidth(1)
    ax.spines['bottom'].set_linewidth(1)
    plt.title('Feature Importance Ranking for RF: F1')
    plt.tight_layout()
#    plt.savefig('D:\Onedrive Gatech\OneDrive - Georgia Institute of Technology\Documents\Mousumi\Figures\Feature_Importance_RF_F1.jpg', format = 'jpg' , dpi=1000)
    plt.show()



#csvfile = "D:\Onedrive Gatech\OneDrive - Georgia Institute of Technology\Documents\Mousumi\Figures/malware_clf_rf_feature_importance.csv"   
#with open(csvfile, "w",newline="") as fp:
#    writer = csv.writer(fp, delimiter=',')
#    writer.writerow(['Feature Name','Feature Importance'])
#    writer.writerows(zip(feature_set, importances))